// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/collector/logs/v1/logs_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

internal enum Opentelemetry_Proto_Collector_Logs_V1_LogsService {
    internal static let descriptor = GRPCCore.ServiceDescriptor.opentelemetry_proto_collector_logs_v1_LogsService
    internal enum Method {
        internal enum Export {
            internal typealias Input = Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest
            internal typealias Output = Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Opentelemetry_Proto_Collector_Logs_V1_LogsService.descriptor.fullyQualifiedService,
                method: "Export"
            )
        }
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Export.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias ClientProtocol = Opentelemetry_Proto_Collector_Logs_V1_LogsService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias Client = Opentelemetry_Proto_Collector_Logs_V1_LogsService_Client
}

extension GRPCCore.ServiceDescriptor {
    internal static let opentelemetry_proto_collector_logs_v1_LogsService = Self(
        package: "opentelemetry.proto.collector.logs.v1",
        service: "LogsService"
    )
}

/// Service that can be used to push logs between one Application instrumented with
/// OpenTelemetry and an collector, or between an collector and a central collector (in this
/// case logs are sent/received to/from multiple Applications).
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal protocol Opentelemetry_Proto_Collector_Logs_V1_LogsService_ClientProtocol: Sendable {
    /// For performance reasons, it is recommended to keep this RPC
    /// alive for the entire life of the application.
    func export<R>(
        request: GRPCCore.ClientRequest<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>,
        serializer: some GRPCCore.MessageSerializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Opentelemetry_Proto_Collector_Logs_V1_LogsService.ClientProtocol {
    internal func export<R>(
        request: GRPCCore.ClientRequest<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.export(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Opentelemetry_Proto_Collector_Logs_V1_LogsService.ClientProtocol {
    /// For performance reasons, it is recommended to keep this RPC
    /// alive for the entire life of the application.
    internal func export<Result>(
        _ message: Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.export(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Service that can be used to push logs between one Application instrumented with
/// OpenTelemetry and an collector, or between an collector and a central collector (in this
/// case logs are sent/received to/from multiple Applications).
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal struct Opentelemetry_Proto_Collector_Logs_V1_LogsService_Client: Opentelemetry_Proto_Collector_Logs_V1_LogsService.ClientProtocol {
    private let client: GRPCCore.GRPCClient

    internal init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }

    /// For performance reasons, it is recommended to keep this RPC
    /// alive for the entire life of the application.
    internal func export<R>(
        request: GRPCCore.ClientRequest<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>,
        serializer: some GRPCCore.MessageSerializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Opentelemetry_Proto_Collector_Logs_V1_LogsService.Method.Export.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}